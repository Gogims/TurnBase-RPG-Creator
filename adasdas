[1mdiff --git a/TurnBase-RPG-Creator/Assets/Classes/ProjectSettings.cs b/TurnBase-RPG-Creator/Assets/Classes/ProjectSettings.cs[m
[1mindex 1e57a9d..0e16551 100644[m
[1m--- a/TurnBase-RPG-Creator/Assets/Classes/ProjectSettings.cs[m
[1m+++ b/TurnBase-RPG-Creator/Assets/Classes/ProjectSettings.cs[m
[36m@@ -3,14 +3,28 @@[m [musing System.IO;[m
 using UnityEngine;[m
 using System.Diagnostics;[m
 [m
[32m+[m[32m/// <summary>[m
[32m+[m[32m/// Clase que se encarga de las configuraciones del proyecto.[m
[32m+[m[32m/// </summary>[m
 public class ProjectSettings  {[m
[32m+[m[32m    /// <summary>[m
[32m+[m[32m    /// Path de unity.exe[m
[32m+[m[32m    /// </summary>[m
     static public string UnityPath { get; set; }[m
[31m-    static private string unitypath; [m
[32m+[m[32m    /// <summary>[m
[32m+[m[32m    /// Archivo de configuracion[m
[32m+[m[32m    /// </summary>[m
     const string path = @"Assets/settings.txt";[m
[32m+[m[32m    /// <summary>[m
[32m+[m[32m    /// Constructor Estatico[m
[32m+[m[32m    /// </summary>[m
     static  ProjectSettings()[m
     {[m
         LoadSettings();[m
     }[m
[32m+[m[32m    /// <summary>[m
[32m+[m[32m    /// Carga las configuraciones del proyecto[m
[32m+[m[32m    /// </summary>[m
     static private void LoadSettings()[m
     {[m
         [m
[36m@@ -23,13 +37,28 @@[m [mpublic class ProjectSettings  {[m
         else[m
             File.Create(path);[m
     }[m
[31m-    static public void SaveSettings()[m
[32m+[m[32m    /// <summary>[m
[32m+[m[32m    /// Guarda las configuraciones del proyecto.[m
[32m+[m[32m    /// </summary>[m
[32m+[m[32m    static public bool SaveSettings()[m
     {[m
[31m-        string content = UnityPath;[m
[31m-        File.WriteAllText(path,content);[m
[32m+[m[32m        if (CheckPath())[m
[32m+[m[32m        {[m
[32m+[m[32m            string content = UnityPath;[m
[32m+[m[32m            File.WriteAllText(path, content);[m
[32m+[m[32m            return true;[m
[32m+[m[32m        }[m
[32m+[m[32m        else[m
[32m+[m[32m            return false;[m
     }[m
[31m-    static public bool CheckPath() {[m
[31m-        if ( File.Exists(UnityPath))[m
[32m+[m[32m    /// <summary>[m
[32m+[m[32m    /// Revisa si el path que se suministro es correcto.[m
[32m+[m[32m    /// </summary>[m
[32m+[m[32m    /// <returns></returns>[m
[32m+[m[32m    static private bool CheckPath() {[m
[32m+[m[32m        string [] unity = UnityPath.Split('/');[m
[32m+[m[32m        string unityexe = (string)unity.GetValue(unity.Length - 1);[m
[32m+[m[32m        if ( unityexe == "Unity.exe" && File.Exists(UnityPath))[m
             return true;[m
         else [m
             return false;[m
